bool rayTriangleIntersect( const Lg::Point3d &orig, const Lg::Point3d &dir, const Lg::Point3d &v0, const Lg::Point3d &v1, const Lg::Point3d &v2, double &t)
{
    double kEpsilon=0.00000001;

    // compute plane's normal
    Lg::Point3d v0v1 = v1 - v0;
    Lg::Point3d v0v2 = v2 - v0;

    Lg::Point3d N = v0v1^v0v2; // N

    //N.Normalized();


    // Step 1: finding P

    // check if ray and plane are parallel ?
    double NdotRayDirection = N*dir;
    if (fabs(NdotRayDirection) < kEpsilon) // almost 0
        return false; // they are parallel so they don't intersect !

    // compute d parameter using equation 2
    double d = N*v0;

    // compute t (equation 3)
    t = (-N*orig+ d) / NdotRayDirection;


    // check if the triangle is in behind the ray
    if (t < 0) return false; // the triangle is behind

    // compute the intersection point using equation 1
    Lg::Point3d P = orig + t * dir;

    // Step 2: inside-outside test
    Lg::Point3d C; // vector perpendicular to triangle's plane

    // edge 0
    Lg::Point3d edge0 = v1 - v0;
    Lg::Point3d vp0 = P - v0;
    C = edge0^vp0;
    if (N*C < 0) return false; // P is on the right side

    // edge 1
    Lg::Point3d edge1 = v2 - v1;
    Lg::Point3d vp1 = P - v1;
    C = edge1^vp1;
    if (N*C< 0)  return false; // P is on the right side

    // edge 2
    Lg::Point3d edge2 = v0 - v2;
    Lg::Point3d vp2 = P - v2;
    C = edge2^vp2;
    if (N*C < 0) return false; // P is on the right side;


    return true; // this ray hits the triangle
}

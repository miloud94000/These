

    vector<double> sigmaPositionX;
    vector<double> sigmaVitesseX;
    vector<double> NormaliseX;


    vector<double> sigmaPositionY;
    vector<double> sigmaPositionZ;

    int taille =5;   //mls.m_trajecto.AccuracySeries().Nevent()
    for(int j=0; j<taille;j++){

        sigmaPositionX.push_back(mls.m_trajecto.AccuracySeries().Event(j).m_northPositionRMSError);
        sigmaVitesseX.push_back(mls.m_trajecto.AccuracySeries().Event(j).m_northVelocityRMSError);

        cout<<"sigmaPositionX :"<<j<<" : "<< sigmaPositionX[j]  <<endl;
        cout<<"sigmaVitesseX :"<<j<< " : "<<sigmaVitesseX[j]  <<endl;
    }

    double dt;
    for(int i=0;i<(taille-1);i++){
         dt=mls.m_trajecto.AccuracySeries().Event(i+1).m_time-mls.m_trajecto.AccuracySeries().Event(i).m_time;
        NormaliseX.push_back(facteur_normalisation(sigmaPositionX[i],sigmaPositionX[i+1],sigmaVitesseX[i],dt ));
         cout<<"NormaliseX :"<<i<<" : "<< NormaliseX[i]  <<endl;
    }


    Eigen::MatrixXd cov(sigmaPositionX.size(),sigmaPositionX.size());



    for(int i=0;i<sigmaPositionX.size();i++){

        for(int j=i;j<sigmaPositionX.size();j++){

            if(i==j){

                cov(i,j)=sigmaPositionX[i]*sigmaPositionX[i];

            }
            else{
                cov(i,j)=sigmaPositionX[i]*sigmaPositionX[i]*accumulate(NormaliseX.begin()+i, NormaliseX.begin()+j, 1., multiplies<double>()) ;
                cov(j,i)=cov(i,j);

            }


        }



    }
